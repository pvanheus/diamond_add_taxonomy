import csv
from typing import Optional, TextIO
import sys

import click
from .taxid_utils import TaxIDExpander


@click.command(short_help='Annotate diamond output with taxonomy names')
@click.option('--taxdump_filename', type=click.Path(exists=True, file_okay=True),
              help='Path to local copy of NCBI taxdump.tar.gz file')
@click.option('--taxdb_filename', type=click.Path(),
              help='Name for the processed database, will be loaded if it exists')
@click.option('--diamond_output_format',
              default='6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore slen qlen qcovhsp stitle staxids',
              help='Output format used by DIAMOND (most include staxids)')
@click.option('--output_file', type=click.File('w'), default=sys.stdout,
              help='Output file to write output with expanded taxonomy information (TSV format)')
@click.argument('diamond_output_file', type=click.File())
def annotate_diamond(diamond_output_file: TextIO,
                     diamond_output_format: str,
                     output_file: TextIO,
                     taxdump_filename: Optional[str] = None,
                     taxdb_filename: Optional[str] = None):
    """annotate_diamond - add lineage info to DIAMOND output file that includes staxids

    A new output file is created with 7 extra columns on the right hand side that
    contain the standard ranks superkingdom, phylym, class, order, family, genus and species
    corresponding to the NCBI taxid in the staxids column.

    The taxonomy lookup is performed using the NCBI taxonomy database via ete3 NCBITaxa. If either
    a saved copy of the taxdump.tar.gz file or the sqlite3 db generated by NCBITaxa is available
    these can be provided to reduce network usage and speed up processing.

    Args:
        diamond_output_file(file) - file containing output from DIAMOND
        diamond_ouput_format(str) - format used for --outfmt with DIAMOND, must contain staxids field
        output_file(file) - file to write output to (default is sys.stdout)
        taxdump_filename(str) - path to NCBI taxdump.tar.gz file for the taxonomy resolver (optional)
        taxdb_filename(str) - path to a sqlite3 db created from NCBI taxdump.tar.gz by ete3 NCBITaxa"""
    annotater = TaxIDExpander(taxdb_filename=taxdb_filename, taxdump_filename=taxdump_filename)
    assert 'staxids' in diamond_output_format, "The DIAMOND output format must include the staxids column"
    taxid_column = diamond_output_format.split().index('staxids') - 1  # the column position, minus 1 to ignore '6'
    output = csv.writer(output_file, delimiter='\t')
    for row in csv.reader(diamond_output_file, delimiter='\t'):
        taxid = row[taxid_column]
        if taxid == '':
            # this entry is missing taxonomy id info
            lineage_info = [('', 'UNKNOWN')] * 7
        elif ';' in taxid:
            # this is an entry from multiples taxons, no clean way to handle that
            lineage_info = [('', 'UNKNOWN/MULTIPLE')] * 7
        else:
            taxid = int(taxid)
            lineage_info_std = annotater.get_lineage(taxid, only_standard_ranks=True)  # we only include the 7 standard ranks
            lineage_dict = dict(lineage_info_std)
            lineage_info = []
            for rank in ['superkingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species']:
                lineage_info.append((rank, lineage_dict.get(rank, 'UNKNOWN')))
        output_row = row + [taxon_info[1] for taxon_info in lineage_info]
        output.writerow(output_row)
    if diamond_output_file != sys.stdout:
        diamond_output_file.close()


if __name__ == '__main__':
    annotate_diamond()  # pylint: disable=E1120
